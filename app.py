import os
import gradio as gr
from crewai import Task, Agent, LLM
from youtube import pesquisar_videos_youtube
from wikipedia import pesquisar_wikipedia
import time
import requests
import io
import tempfile
import re
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont


GROQ_API_KEY_01 = os.getenv("GROQ_API_KEY_01")
groqllm = LLM(
    model="groq/llama-3.3-70b-versatile",
    api_key=GROQ_API_KEY_01
)
GROQ_API_KEY_02 = os.getenv("GROQ_API_KEY_02")
groqllm2 = LLM(
    model="groq/llama-3.3-70b-versatile",
    api_key=GROQ_API_KEY_02
)

def processar_topicos(topicos_str):
    """ Converte uma string de t√≥picos separada por v√≠rgulas em uma lista tratada. """
    return [t.strip() for t in topicos_str.split(',') if t.strip()]

def generate_pdf(markdown_content):
    """Converte conte√∫do Markdown para PDF usando reportlab, suportando caracteres UTF-8."""
    pdf_buffer = io.BytesIO()
    doc = SimpleDocTemplate(pdf_buffer, pagesize=letter, rightMargin=inch, leftMargin=inch, topMargin=inch, bottomMargin=inch)
    
    styles = getSampleStyleSheet()
    
    # Ajustar estilos para suportar UTF-8
    h1_style = styles['Heading1']
    h2_style = styles['Heading2']
    h3_style = styles['Heading3']
    body_style = styles['BodyText']
    bullet_style = styles['BodyText']
    bullet_style.leftIndent = 20
    
    # Fun√ß√£o para sanitizar texto, preservando acentos e cedilhas
    def sanitize_text(text):
        # Substituir links Markdown [texto](url) por texto (url)
        text = re.sub(r'\[([^\]]+)\]\(([^\)]+)\)', r'\1 (\2)', text)
        # Remover tags HTML
        text = re.sub(r'<[^>]+>', '', text)
        # Escapar caracteres que podem parecer tags XML
        text = text.replace('<', '&lt;').replace('>', '&gt;')
        # Substituir emojis por texto descritivo
        emoji_map = {
            'üéØ': '[Alvo] ',
            'üìñ': '[Livro] ',
            'üìÖ': '[Calend√°rio] ',
            'üé•': '[V√≠deo] ',
            'üìú': '[Documento] '
        }
        for emoji, replacement in emoji_map.items():
            text = text.replace(emoji, replacement)
        return text
    
    story = []
    lines = markdown_content.split('\n')
    for line in lines:
        line = line.strip()
        if not line:
            story.append(Spacer(1, 0.2 * inch))
            continue
        
        if line.startswith('# '):
            text = sanitize_text(line[2:])
            story.append(Paragraph(text, h1_style))
        elif line.startswith('## '):
            text = sanitize_text(line[3:])
            story.append(Paragraph(text, h2_style))
        elif line.startswith('### '):
            text = sanitize_text(line[4:])
            story.append(Paragraph(text, h3_style))
        elif line.startswith('- '):
            text = sanitize_text(line[2:])
            story.append(Paragraph(f"‚Ä¢ {text}", bullet_style))
        elif line.startswith('---'):
            story.append(Spacer(1, 0.3 * inch))
        else:
            text = sanitize_text(line)
            story.append(Paragraph(text, body_style))
    
    doc.build(story)
    pdf_buffer.seek(0)
    
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_pdf:
        temp_pdf.write(pdf_buffer.read())
        temp_pdf_path = temp_pdf.name
    
    return temp_pdf_path

def generate_markdown_file(markdown_content):
    """Gera um arquivo Markdown a partir do conte√∫do."""
    with tempfile.NamedTemporaryFile(delete=False, suffix='.md', mode='w', encoding='utf-8') as temp_md:
        temp_md.write(markdown_content)
        temp_md_path = temp_md.name
    
    return temp_md_path

def executar_equipe_interface(disciplina, assunto, topicos_str, horas, dias):
    topicos = processar_topicos(topicos_str)
    solicitacao = f"Disciplina: {disciplina}\nAssunto: {assunto}\nT√≥picos: {topicos}\n"

    # Busca no YouTube
    yield "Buscando v√≠deos no YouTube...", gr.update(value=10), None, None
    entradaYoutube = pesquisar_videos_youtube(solicitacao)

    # Busca na Wikipedia
    yield "Buscando artigos na Wikipedia...", gr.update(value=20), None, None
    entradaWikipedia = pesquisar_wikipedia(topicos)

    # Motiva√ß√£o
    yield "Criando mensagem motivacional...", gr.update(value=30), None, None
    agentMotivador = Agent(
        role='Motivador',
        goal='Escrever uma mensagem motivacional para o estudante.',
        backstory='Voc√™ √© um coach motivacional com experi√™ncia em ajudar estudantes a manterem o foco.',
        llm=groqllm,
        verbose=True
    )
    taskMotivador = Task(
        description=(
            "Escreva uma mensagem motivacional para o estudante, formatada em Markdown.\n\n"
            "A mensagem deve conter:\n"
            "## Mensagem Motivacional üéØ\n\n"
            "- Um par√°grafo inicial incentivando o estudante a seguir seus estudos.\n"
            "- Frases inspiradoras para manter o foco e a disciplina.\n"
            "- Um fechamento encorajador, refor√ßando a import√¢ncia do esfor√ßo e da dedica√ß√£o.\n\n"
            "O texto deve ser positivo, motivador e adequado para estudantes de ensino m√©dio."
        ),
        agent=agentMotivador,
        expected_output='Mensagem motivacional em markdown.'
    )
    saidaMotivador = agentMotivador.execute_task(taskMotivador)

    # Guia de Estudos
    yield "Gerando guia de estudos...", gr.update(value=50), None, None
    agentGuia = Agent(
        role="Especialista em Guia de Estudos",
        goal="Criar um guia de estudos estruturado, explicativo e did√°tico sobre um determinado assunto.",
        backstory="Voc√™ √© um especialista em educa√ß√£o, com experi√™ncia na cria√ß√£o de guias de estudo detalhados.",
        llm=groqllm,
        verbose=True
    )
    taskGuia = Task(
        description=(
            f"Crie um Guia de Estudos para {disciplina}, abordando {assunto} e os t√≥picos {topicos}. "
            "O guia deve seguir a seguinte estrutura e formata√ß√£o:\n\n"
            "## Guia de Estudos: {disciplina}\n\n"
            "### Introdu√ß√£o\n"
            "- Texto introdut√≥rio justificado sobre o tema, destacando sua import√¢ncia e contexto.\n\n"
            "### Conceitos Fundamentais\n"
            "- Explica√ß√£o detalhada dos principais conceitos abordados, com exemplos pr√°ticos.\n"
            "- Utilize listas desordenadas para estruturar os conceitos.\n\n"
            "### Aplica√ß√µes Pr√°ticas\n"
            "- Explique como o tema se aplica no mundo real.\n"
            "- Utilize exemplos concretos e listas para organizar as aplica√ß√µes.\n\n"
            "### T√©cnicas de Aprendizado e Dificuldades Comuns\n"
            "- Apresente m√©todos eficazes para aprender o tema.\n"
            "- Liste dificuldades comuns dos alunos e estrat√©gias para super√°-las.\n\n"
            "### Indica√ß√£o de Materiais Gratuitos\n"
            "- Forne√ßa sugest√µes de livros, v√≠deos e artigos gratuitos sobre o tema.\n"
            "- Apresente os materiais em formato de lista com t√≠tulos e links quando poss√≠vel.\n\n"
            "O conte√∫do deve ser did√°tico, acess√≠vel para alunos do ensino m√©dio e utilizar texto justificado sempre que poss√≠vel."
        ),
        agent=agentGuia,
        expected_output='Guia de estudos em markdown'
    )
    saidaGuia = agentGuia.execute_task(taskGuia)

    # Plano de Estudos
    yield "Criando plano de estudos...", gr.update(value=70), None, None
    agentPlano = Agent(
        role="Especialista em Plano de Estudos",
        goal="Criar um plano de estudos eficiente para que o aluno aprenda de maneira organizada.",
        backstory="Voc√™ √© um planejador educacional especialista em cronogramas de estudo eficientes.",
        llm=groqllm2,
        verbose=True
    )
    taskPlano = Task(
        description=(
            f"Crie um Plano de Estudos para {disciplina}, cobrindo {assunto} e os t√≥picos {topicos}. "
            f"O aluno tem {horas} horas por dia e {dias} dias para estudar.\n\n"
            "O plano deve seguir esta estrutura e formata√ß√£o:\n\n"
            "## Plano de Estudos: {disciplina}\n\n"
            "### Introdu√ß√£o\n"
            "- Apresenta√ß√£o do objetivo do plano de estudos.\n"
            "- Import√¢ncia da organiza√ß√£o para otimizar o aprendizado.\n\n"
            "### Distribui√ß√£o Equilibrada dos T√≥picos\n"
            "- Divis√£o dos conte√∫dos de forma proporcional ao tempo dispon√≠vel.\n"
            "- Sugerir uma agenda di√°ria/semanal equilibrada.\n\n"
            "### T√©cnicas Ativas de Aprendizado\n"
            "- Explica√ß√£o de estrat√©gias eficazes para o estudo, incluindo:\n"
            "  - Resumos\n"
            "  - Flashcards\n"
            "  - Mapas mentais\n"
            "  - Resolu√ß√£o de exerc√≠cios\n\n"
            "### Revis√µes Programadas\n"
            "- Definir per√≠odos estrat√©gicos para revis√£o de conte√∫dos.\n"
            "- Sugest√£o de t√©cnicas como repeti√ß√£o espa√ßada e autoavalia√ß√£o.\n\n"
            "### Monitoramento do Progresso\n"
            "- M√©todos para acompanhar a evolu√ß√£o do estudo.\n"
            "- Uso de checklists ou aplicativos para organiza√ß√£o.\n\n"
            "### Sugest√µes para Pausas e Evitar Sobrecarga Mental\n"
            "- Import√¢ncia das pausas regulares para manter a produtividade.\n"
            "- Sugest√£o de t√©cnicas como a T√©cnica Pomodoro.\n"
            "- Dicas para manter o bem-estar mental durante os estudos.\n\n"
            "O plano deve ser did√°tico, bem estruturado e adapt√°vel para alunos do ensino m√©dio."
        ),
        agent=agentPlano,
        expected_output='Plano de estudos estruturado em markdown'
    )
    saidaPlano = agentPlano.execute_task(taskPlano)

    # Curadoria de V√≠deos
    yield "Organizando v√≠deos do YouTube...", gr.update(value=90), None, None
    agentYoutube = Agent(
        role='Especialista em Curadoria de V√≠deos Educacionais',
        goal='Organizar e formatar v√≠deos educacionais encontrados no YouTube para aprendizado eficiente.',
        backstory='Voc√™ √© um especialista em curadoria de materiais educacionais, com experi√™ncia na sele√ß√£o de v√≠deos para ensino.',
        llm=groqllm2,
        verbose=True
    )
    taskYoutube = Task(
        description=(
            f"Lista do Youtube: {entradaYoutube} "
            "Voc√™ receber√° uma lista de v√≠deos extra√≠da da API do YouTube. Sua tarefa √© classificar e organizar os v√≠deos "
            "por categorias, formatando-os em Markdown. As categorias devem ser baseadas no t√≠tulo do v√≠deo.\n\n"
            f"## V√≠deos sobre {assunto}\n\n"
            "### Formato de sa√≠da\n"
            "- Para cada v√≠deo, a sa√≠da deve seguir o formato abaixo:\n"
            "  **[T√≠tulo](URL)**\n\n  _Descri√ß√£o_\n\n"
            "- Se um v√≠deo n√£o tiver descri√ß√£o, substituir por '(Sem descri√ß√£o dispon√≠vel)'.\n"
            "- Se houver mais de um v√≠deo, repetir a estrutura para cada um.\n"
            "- Certifique-se de que a formata√ß√£o Markdown esteja correta e bem organizada."
            "Caso um dos videos seja esse: https://www.youtube.com/watch?v=dQw4w9WgXcQ"
            "a saida dever√° ser:"
            "##N√£o foram encontrados v√≠deos sobre o assunto"
        ),
        agent=agentYoutube,
        expected_output="Lista de v√≠deos organizados em Markdown."
    )
    saidaYoutube = agentYoutube.execute_task(taskYoutube)

    # Curadoria de Artigos da Wikipedia
    yield "Organizando artigos da Wikipedia...", gr.update(value=95), None, None
    agentWikipedia = Agent(
        role='Especialista em Curadoria de Artigos Educacionais',
        goal='Organizar e formatar artigos educacionais encontrados na Wikipedia para aprendizado eficiente.',
        backstory='Voc√™ √© um especialista em curadoria de materiais educacionais, com experi√™ncia na sele√ß√£o de artigos para ensino.',
        llm=groqllm2,
        verbose=True
    )
    taskWikipedia = Task(
        description=(
            f"Lista de artigos da Wikipedia: {entradaWikipedia} "
            "Voc√™ receber√° uma lista de artigos extra√≠da da API da Wikipedia. Sua tarefa √© organizar os artigos "
            "em Markdown, formatando-os de forma clara e educacional.\n\n"
            f"## Artigos sobre {assunto}\n\n"
            "### Formato de sa√≠da\n"
            "- For each article, the output should follow the format below:\n"
            "  **[T√≠tulo](URL)**\n\n  _Trecho_\n\n"
            "- Se um artigo n√£o tiver trecho, substituir por '(Sem trecho dispon√≠vel)'.\n"
            "- Se houver mais de um artigo, repetir a estrutura para cada um.\n"
            "- Certifique-se de que a formata√ß√£o Markdown esteja correta e bem organizada."
            "Caso n√£o tenha encontrado artigos relevantes, a sa√≠da dever√° ser:\n\n"
            "## N√£o foram encontrados artigos sobre o assunto\n\n"
            "N√£o busque que n√£o tenham sido enviado na lista de artigos."
        ),
        agent=agentWikipedia,
        expected_output="Lista de artigos organizados em Markdown."
    )
    saidaWikipedia = agentWikipedia.execute_task(taskWikipedia)

    yield "Processo conclu√≠do!", gr.update(value=100), None, None

    saidaCompleta = f"""
# üéØ Motiva√ß√£o
{saidaMotivador}
---
# üìñ Guia de Estudos
{saidaGuia}
---
# üìÖ Plano de Estudos
{saidaPlano}
---
# üé• V√≠deos Educacionais
{saidaYoutube}
---
# üìú Artigos da Wikipedia
{saidaWikipedia}
"""

    # Gerar arquivos para download
    pdf_file = generate_pdf(saidaCompleta)
    markdown_file = generate_markdown_file(saidaCompleta)

    yield saidaCompleta, gr.update(value=100), pdf_file, markdown_file

# Interface Gradio
with gr.Blocks() as demo:
    gr.Markdown("# üìö Gerador de Material de Estudos")
    with gr.Row():
        with gr.Column():
            disciplina = gr.Textbox(label="Disciplina", value="Matem√°tica")
            assunto = gr.Textbox(label="Assunto", value="Fun√ß√µes")
            topicos_str = gr.Textbox(label="T√≥picos", value="Fun√ß√£o quadr√°tica, Fun√ß√£o exponencial, Fun√ß√£o logar√≠tmica")
            horas = gr.Textbox(label="Tempo di√°rio", value="2 horas")
            dias = gr.Textbox(label="Quantos dias", value="5 dias")
            gerar_button = gr.Button("Gerar Material")
            progress = gr.Slider(minimum=0, maximum=100, step=1, value=0, label="Progresso", interactive=False)
        with gr.Column():
            resultado = gr.Markdown(label="Material Completo (Markdown)")
            with gr.Row():
                download_pdf = gr.File(label="Baixar PDF", visible=False)
                download_markdown = gr.File(label="Baixar Markdown", visible=False)

    def update_download_buttons(pdf_file, markdown_file):
        return (
            gr.update(value=pdf_file, visible=True, label="Baixar PDF", file_types=[".pdf"]),
            gr.update(value=markdown_file, visible=True, label="Baixar Markdown", file_types=[".md"])
        )

    gerar_button.click(
        fn=executar_equipe_interface,
        inputs=[disciplina, assunto, topicos_str, horas, dias],
        outputs=[resultado, progress, download_pdf, download_markdown]
    ).then(
        fn=update_download_buttons,
        inputs=[download_pdf, download_markdown],
        outputs=[download_pdf, download_markdown]
    )

demo.launch()
